package com.nikita.com.nikita.kotlincourse.lesson19.Homework19

//Ответы на вопросы и доработка кода:
//
//Вопрос 1:
//
//Почему поле privateVal доступно в main() для чтения из класса ChildrenClass?
//
//Ответ: Поле privateVal из базового класса недоступно напрямую, но оно передаётся как аргумент в конструктор ChildrenClass, и затем сохраняется в publicVal базового класса, который имеет модификатор val (публичное свойство). Поэтому это значение доступно для чтения через publicVal.
//
//Вопрос 2:
//
//Почему поле protectedVal недоступно в main()?
//
//Ответ: Поле protectedVal доступно только в самом классе BaseClass, его подклассах и, возможно, в функциях тех же пакетов (если internal используется). В main() оно недоступно, так как main() не является частью этих классов.
//Вопрос 3:
//
//Почему аргумент publicVal доступен в main(), несмотря на то, что это не поле?
//
//Ответ: Аргумент publicVal, переданный в конструктор ChildrenClass, становится публичным полем базового класса BaseClass благодаря соответствующему объявлению val publicVal: String. Поэтому он доступен в main().
//
//Вопрос 4:
//
//Почему в main() доступна функция getAll(), хотя её нет в ChildrenClass?
//
//Ответ: Метод getAll() унаследован от базового класса BaseClass. Поскольку он имеет модификатор fun (по умолчанию public), он доступен во всех классах и в main().
//Вопрос 5:
//
//Что выводится при вызове функции printText() и почему не происходит переопределение метода privatePrint()?
//
//Ответ: Метод privatePrint() объявлен с модификатором private в BaseClass, что означает, что он недоступен для переопределения в подклассе. Поэтому вызов printText() всегда будет использовать реализацию из BaseClass.
//Вопрос 6:
//
//Почему функция getProtectedClass() не может быть публичной?
//
//Ответ: Если бы getProtectedClass() была публичной, то возвращаемый ею тип ProtectedClass должен был бы быть видимым за пределами BaseClass. Однако ProtectedClass объявлен с модификатором protected, что ограничивает его видимость только в самом классе и его подклассах.
//
//Вопрос 7:
//
//Почему функция getPrivateClass() не может быть публичной или protected?
//
//Ответ: getPrivateClass() возвращает экземпляр PrivateClass, который объявлен как private в BaseClass. Это означает, что PrivateClass видим только внутри BaseClass. Если бы getPrivateClass() была public или protected, это нарушило бы инкапсуляцию, так как код снаружи мог бы попытаться получить доступ к PrivateClass, что запрещено.
